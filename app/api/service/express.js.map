{
    "version": 3,
    "sources": [
        "..\\..\\..\\src\\api\\service\\express.js"
    ],
    "names": [
        "rp",
        "require",
        "_",
        "module",
        "exports",
        "think",
        "Service",
        "queryExpress",
        "shipperCode",
        "logisticCode",
        "orderCode",
        "expressInfo",
        "success",
        "shipperName",
        "isFinish",
        "traces",
        "fromData",
        "generateFromData",
        "isEmpty",
        "sendOptions",
        "method",
        "url",
        "config",
        "headers",
        "form",
        "requestResult",
        "parseExpressResult",
        "err",
        "isString",
        "JSON",
        "parse",
        "Success",
        "Number",
        "parseInt",
        "State",
        "Traces",
        "Array",
        "isArray",
        "map",
        "item",
        "datetime",
        "AcceptTime",
        "content",
        "AcceptStation",
        "reverse",
        "requestData",
        "generateRequestData",
        "RequestData",
        "encodeURI",
        "EBusinessID",
        "RequestType",
        "DataSign",
        "generateDataSign",
        "DataType",
        "OrderCode",
        "ShipperCode",
        "LogisticCode",
        "stringify",
        "Buffer",
        "from",
        "md5",
        "toString"
    ],
    "mappings": "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",
    "file": "..\\..\\..\\src\\api\\service\\express.js",
    "sourcesContent": [
        "const rp = require('request-promise');\r\nconst _ = require('lodash');\r\n\r\nmodule.exports = class extends think.Service {\r\n  async queryExpress(shipperCode, logisticCode, orderCode = '') {\r\n    let expressInfo = {\r\n      success: false,\r\n      shipperCode: shipperCode,\r\n      shipperName: '',\r\n      logisticCode: logisticCode,\r\n      isFinish: 0,\r\n      traces: []\r\n    };\r\n    const fromData = this.generateFromData(shipperCode, logisticCode, orderCode);\r\n    if (think.isEmpty(fromData)) {\r\n      return expressInfo;\r\n    }\r\n\r\n    const sendOptions = {\r\n      method: 'POST',\r\n      url: think.config('express.request_url'),\r\n      headers: {\r\n        'content-type': 'application/x-www-form-urlencoded'\r\n      },\r\n      form: fromData\r\n    };\r\n\r\n    try {\r\n      const requestResult = await rp(sendOptions);\r\n      if (think.isEmpty(requestResult)) {\r\n        return expressInfo;\r\n      }\r\n      expressInfo = this.parseExpressResult(requestResult);\r\n      expressInfo.shipperCode = shipperCode;\r\n      expressInfo.logisticCode = logisticCode;\r\n      return expressInfo;\r\n    } catch (err) {\r\n      return expressInfo;\r\n    }\r\n  }\r\n\r\n  parseExpressResult(requestResult) {\r\n    const expressInfo = {\r\n      success: false,\r\n      shipperCode: '',\r\n      shipperName: '',\r\n      logisticCode: '',\r\n      isFinish: 0,\r\n      traces: []\r\n    };\r\n\r\n    if (think.isEmpty(requestResult)) {\r\n      return expressInfo;\r\n    }\r\n\r\n    try {\r\n      if (_.isString(requestResult)) {\r\n        requestResult = JSON.parse(requestResult);\r\n      }\r\n    } catch (err) {\r\n      return expressInfo;\r\n    }\r\n\r\n    if (think.isEmpty(requestResult.Success)) {\r\n      return expressInfo;\r\n    }\r\n\r\n    // 判断是否已签收\r\n    if (Number.parseInt(requestResult.State) === 3) {\r\n      expressInfo.isFinish = 1;\r\n    }\r\n    expressInfo.success = true;\r\n    if (!think.isEmpty(requestResult.Traces) && Array.isArray(requestResult.Traces)) {\r\n      expressInfo.traces = _.map(requestResult.Traces, item => {\r\n        return { datetime: item.AcceptTime, content: item.AcceptStation };\r\n      });\r\n      _.reverse(expressInfo.traces);\r\n    }\r\n    return expressInfo;\r\n  }\r\n\r\n  generateFromData(shipperCode, logisticCode, orderCode) {\r\n    const requestData = this.generateRequestData(shipperCode, logisticCode, orderCode);\r\n    const fromData = {\r\n      RequestData: encodeURI(requestData),\r\n      EBusinessID: think.config('express.appid'),\r\n      RequestType: '1002',\r\n      DataSign: this.generateDataSign(requestData),\r\n      DataType: '2'\r\n    };\r\n    return fromData;\r\n  }\r\n\r\n  generateRequestData(shipperCode, logisticCode, orderCode = '') {\r\n    // 参数验证\r\n    const requestData = {\r\n      OrderCode: orderCode,\r\n      ShipperCode: shipperCode,\r\n      LogisticCode: logisticCode\r\n    };\r\n    return JSON.stringify(requestData);\r\n  }\r\n\r\n  generateDataSign(requestData) {\r\n    return encodeURI(Buffer.from(think.md5(requestData + think.config('express.appkey'))).toString('base64'));\r\n  }\r\n};\r\n"
    ]
}