{
    "version": 3,
    "sources": [
        "..\\..\\..\\src\\api\\controller\\comment.js"
    ],
    "names": [
        "Base",
        "require",
        "module",
        "exports",
        "postAction",
        "typeId",
        "post",
        "valueId",
        "content",
        "buffer",
        "Buffer",
        "from",
        "insertId",
        "model",
        "add",
        "type_id",
        "value_id",
        "toString",
        "add_time",
        "getTime",
        "user_id",
        "getLoginUserId",
        "success",
        "fail",
        "countAction",
        "get",
        "allCount",
        "where",
        "count",
        "hasPicCount",
        "alias",
        "join",
        "table",
        "on",
        "listAction",
        "showType",
        "page",
        "size",
        "comments",
        "countSelect",
        "field",
        "commentList",
        "commentItem",
        "data",
        "comment",
        "id",
        "think",
        "datetime",
        "Date",
        "user_info",
        "find",
        "pic_list",
        "comment_id",
        "select",
        "push"
    ],
    "mappings": "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",
    "file": "..\\..\\..\\src\\api\\controller\\comment.js",
    "sourcesContent": [
        "const Base = require('./base.js');\r\n\r\nmodule.exports = class extends Base {\r\n  /**\r\n   * 评论类型说明：\r\n   * 0 商品\r\n   * 1 专题\r\n   */\r\n\r\n  /**\r\n   * 发表评论\r\n   * @returns {Promise.<*|PreventPromise|void|Promise>}\r\n   */\r\n  async postAction() {\r\n    const typeId = this.post('typeId');\r\n    const valueId = this.post('valueId');\r\n    const content = this.post('content');\r\n    const buffer = Buffer.from(content);\r\n    const insertId = await this.model('comment').add({\r\n      type_id: typeId,\r\n      value_id: valueId,\r\n      content: buffer.toString('base64'),\r\n      add_time: this.getTime(),\r\n      user_id: this.getLoginUserId()\r\n    });\r\n\r\n    if (insertId) {\r\n      return this.success('评论添加成功');\r\n    } else {\r\n      return this.fail('评论保存失败');\r\n    }\r\n  }\r\n\r\n  async countAction() {\r\n    const typeId = this.get('typeId');\r\n    const valueId = this.get('valueId');\r\n\r\n    const allCount = await this.model('comment').where({type_id: typeId, value_id: valueId}).count('id');\r\n\r\n    const hasPicCount = await this.model('comment').alias('comment')\r\n      .join({\r\n        table: 'comment_picture',\r\n        join: 'right',\r\n        alias: 'comment_picture',\r\n        on: ['id', 'comment_id']\r\n      }).where({'comment.type_id': typeId, 'comment.value_id': valueId}).count('comment.id');\r\n\r\n    return this.success({\r\n      allCount: allCount,\r\n      hasPicCount: hasPicCount\r\n    });\r\n  }\r\n\r\n  async listAction() {\r\n    const typeId = this.get('typeId');\r\n    const valueId = this.get('valueId');\r\n    const showType = this.get('showType'); // 选择评论的类型 0 全部， 1 只显示图片\r\n\r\n    const page = this.get('page');\r\n    const size = this.get('size');\r\n\r\n    let comments = [];\r\n    if (showType !== 1) {\r\n      comments = await this.model('comment').where({\r\n        type_id: typeId,\r\n        value_id: valueId\r\n      }).page(page, size).countSelect();\r\n    } else {\r\n      comments = await this.model('comment').alias('comment')\r\n        .field(['comment.*'])\r\n        .join({\r\n          table: 'comment_picture',\r\n          join: 'right',\r\n          alias: 'comment_picture',\r\n          on: ['id', 'comment_id']\r\n        }).page(page, size).where({'comment.type_id': typeId, 'comment.value_id': valueId}).countSelect();\r\n    }\r\n\r\n    const commentList = [];\r\n    for (const commentItem of comments.data) {\r\n      const comment = {};\r\n      comment.content = Buffer.from(commentItem.content, 'base64').toString();\r\n      comment.type_id = commentItem.type_id;\r\n      comment.value_id = commentItem.value_id;\r\n      comment.id = commentItem.id;\r\n      comment.add_time = think.datetime(new Date(commentItem.add_time * 1000));\r\n      comment.user_info = await this.model('user').field(['username', 'avatar', 'nickname']).where({id: commentItem.user_id}).find();\r\n      comment.pic_list = await this.model('comment_picture').where({comment_id: commentItem.id}).select();\r\n      commentList.push(comment);\r\n    }\r\n    comments.data = commentList;\r\n    return this.success(comments);\r\n  }\r\n};\r\n"
    ]
}